Description: >-
  AWS CloudFormation Sample Template path-based ALB routing: Create 3 instances in
  3 different subnets and make 3 different target groups to route path-based.
#--------------------------PARAMETERS---------------------
Parameters:
  amiId:
    Description: AMI for the instances(default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  Key:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: "SSH keypair name"
  
  Subnet1:
    Type: 'AWS::EC2::Subnet::Id'
    Description: "Subnet ID for the 1st EC2"

  Subnet2:
    Type: 'AWS::EC2::Subnet::Id'
    Description: "Subnet ID for the 2nd EC2"
  
  vpcID:
    Type: 'AWS::EC2::VPC::Id'
    Description: "Default VPC ID"

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

#----------------------------RESOURCES-------------------------
Resources:
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Key
      InstanceType: "t2.micro"
      ImageId: !Ref amiId
      SubnetId: !Ref Subnet1
      SecurityGroupIds: 
        - !Ref CustomSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            touch /var/www/html/index.html
            echo "hello world from, " >> /var/www/html/index.html 
            curl checkip.amazonaws.com >> /var/www/html/index.html
      Tags:
        - Key: Name
          Value: Server1

  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Key
      InstanceType: "t2.micro"
      ImageId: !Ref amiId
      SubnetId: !Ref Subnet2
      SecurityGroupIds: 
        - !Ref CustomSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            mkdir /var/www/html/hello
            touch /var/www/html/hello/index.html
            echo "hello world from, " >> /var/www/html/hello/index.html 
            curl checkip.amazonaws.com >> /var/www/html/hello/index.html
      Tags:
        - Key: Name
          Value: Server2

  CustomSG: 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref vpcID
      GroupDescription: SSH access and HTTP Port access
      SecurityGroupIngress:
        - Description: 'Inbound SSH traffic'
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - Description: 'Inbound from ALB Security group'
          SourceSecurityGroupId: !Ref ALBSG
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          
  ALBSG: 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref vpcID
      GroupDescription: Access for IPv4 and IPv6 
      SecurityGroupIngress:
        - Description: 'Inbound IPv4 HTTP traffic'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - Description: 'Inbound IPv4 HTTPS traffic'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
  
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 20
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: TargetGroup1
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref Instance1
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref vpcID
      Tags:
      - Key: Name
        Value: TargetGroup1

  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/hello/index.html"
      HealthCheckIntervalSeconds: 20
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: TargetGroup2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref Instance2
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref vpcID
      Tags:
      - Key: Name
        Value: TargetGroup2
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
      SecurityGroups:
      - Ref: ALBSG

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup1
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup2
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
              Values: 
                  - /hello* # wildcard represents everything in this path
      ListenerArn: !Ref ALBListener
      Priority: 1

Outputs:    

    ALBDNS:
        Description: The created loadbalancer
        Value: !GetAtt  ApplicationLoadBalancer.DNSName
        Export: 
          Name: Export-ALB-DNSName

    TargetGroup1:
        Description: The created TargetGroup 1
        Value: !Ref TargetGroup1
        Export:
          Name: Export-TargetGroup1

    TargetGroup2:
        Description: The created TargetGroup 2
        Value: !Ref TargetGroup2
        Export:
          Name: Export-TargetGroup2

    TargetGroup3:
        Description: The created TargetGroup 3
        Value: !Ref TargetGroup3
        Export:
          Name: Export-TargetGroup3

    ALBListener:
        Description: Listener
        Value: !Ref ALBListener
        Export:
          Name: Export-ALB-Listener